namespace :dm do
  # Usage: sake dm:clone
  desc 'Clone a copy of the DataMapper repository and dependencies'
  task :clone do
    require 'pathname'

    base_path = Pathname.getwd

    unless base_path.basename.to_s == 'dm'
      base_path += 'dm'
      base_path.mkdir unless base_path.directory?
      cd base_path
    end

    users = {
      'sam'   => %w[ extlib do dm-core dm-more ],
      'dkubb' => %w[ dm-dev ]
    }

    users.each do |user,repos|
      repos.each do |r|
        path = base_path + r
        next if path.directory?
        sh "git clone git://github.com/#{user}/#{r}.git"
      end
    end
  end

  # Usage: sake dm:update
  desc 'Update your local DataMapper.  Run from inside the top-level dm directory.'
  task :update => %w[ dm:clone ]  do
    %w[ extlib do dm-core dm-more dm-dev ].each do |r|
      puts "Updating #{r}"
      cd r
      sh 'git fetch'
      sh 'git checkout master'
      sh 'git rebase origin/master'
      cd '..'
    end
  end

  namespace :gems do
    # Usage: sake dm:gems:wipe
    desc 'Uninstall all RubyGems related to DataMapper'
    task :wipe do
      sudo = ENV['SUDOLESS'] == 'true' || RUBY_PLATFORM =~ /win32|cygwin/ ? '' : 'sudo'
    require 'pathname'

    base_path = Pathname.getwd

    unless base_path.basename.to_s == 'dm'
      base_path += 'dm'
      if base_path.directory?
        cd base_path
      else
        warn "This task must be run from the dm directory, or its parent"
        exit 1
      end
    end
      %w[ dm-core dm-more do_sqlite3 do_postgres do_mysql data_objects extlib ].each do |gem|
        if %w[ dm-more ].include?(gem)
          cd gem
          sh 'rake uninstall'
          cd '..'
        else
          sh "#{sudo} gem uninstall #{gem} --all --ignore-dependencies --executables; true"
        end
      end
    end

    # Usage: sake dm:gems:refresh
    desc 'Pull fresh copies of DataMapper and refresh all the gems'
    task :refresh => %w[ dm:gems:wipe dm:update dm:install ]
  end

  # Usage: sake dm:install
  desc 'Install extlib, do, dm-core and dm-more'
  task :install => %w[ dm:install:extlib dm:install:do dm:install:core dm:install:more ]

  namespace :install do
    # Usage: sake extlib
    desc 'Install extlib'
    task :extlib do
      cd 'extlib'
      sh 'rake install; true'
      cd '..'
    end

    # Usage: sake dm:install:core
    desc 'Install dm-core'
    task :core do
      cd 'dm-core'
      sh 'rake install; true'
      cd '..'
    end

    # Usage: sake dm:install:more
    desc 'Install dm-more'
    task :more do
      cd 'dm-more'
      sh 'rake install; true'
      cd '..'
    end

    # Usage: sake dm:install:do
    desc 'Install do drivers'
    task :do => %w[ dm:install:extlib dm:install:do:data_objects dm:install:do:postgres dm:install:do:mysql dm:install:do:sqlite3 ]

    # TODO: make rake install task in do
    namespace :do do
      # Usage: sake dm:install:do:data_objects
      desc 'Install data_objects'
      task :data_objects do
        cd 'do/data_objects'
        sh 'rake install; true'
        cd '../..'
      end

      # Usage: sake dm:install:do:postgres
      desc 'Install do_postgres'
      task :postgres do
        cd 'do/do_postgres'
        sh 'rake install; true'
        cd '../..'
      end

      # Usage: sake dm:install:do:mysql
      desc 'Install do_mysql'
      task :mysql do
        cd 'do/do_mysql'
        sh 'rake install; true'
        cd '../..'
      end

      # Usage: sake dm:install:do:sqlite3
      desc 'Install do_sqlite3'
      task :sqlite3 do
        cd 'do/do_sqlite3'
        sh 'rake install; true'
        cd '../..'
      end
    end
  end

  namespace :sake do
    # Usage: sake dm:sake:refresh
    desc 'Remove and reinstall DataMapper sake recipes'
    task :refresh do
      tasks = []

      `sake -T`.each do |line|
        next unless match = line.match(/\Asake\s(dm:.+?|strip)\s/)
        tasks << match.captures.first
      end

      sh "sake -u #{tasks * ' '}"
      sh 'sake -i http://datamapper.org/dm-dev.sake'
    end
  end

  # Usage: sake dm:update:version old=0.9.1 new=0.9.3
  desc 'Update the version number for dm-core, dm-more and do (not extlib)'
  task 'update:version' do
    versions = ENV.values_at('old', 'new').map { |v| Regexp.escape(v) }
    sh %q[find dm-core dm-more do/* -type f -exec perl -pi -e 's/\\b%s\\b/%s/g' {} \;] % versions
  end
end

desc 'Strip trailing whitespace from source files'
task :strip do
  require 'pathname'
  require 'zlib'

  # files and extensions to process
  files      = %w[ capfile CHANGELOG MIT-LICENSE README README_FOR_APP RUNNING_UNIT_TESTS Rakefile TODO USAGE .autotest .gitignore ].freeze
  extensions = %w[ builder cgi conf css deploy erb example fcgi haml htc htm html js key opts php rake ratom rb rcsv rdf rhtml rjs rpdf rxml sake sass sh sql txt vcf xml yml ].freeze

  Pathname.getwd.find do |path|
    # skip unreadable, unwritable, .git and .svn directories
    Find.prune if (path.directory? && (!path.readable? || !path.writable?)) || %w[ .git .svn ].include?(path.basename.to_s)

    # skip non-files, zero-sized files, files not matching specific names, or files without the matching extensions
    next unless path.file? && path.size? && (files.include?(path.basename.to_s) || extensions.include?(path.extname[1..-1]))

    # replace leading whitespace (including tabs) with spaces
    # replace trailing whitespace with a newline
    document = path.open('r') do |f|
      f.collect { |line| line.gsub(/\G\s/, ' ').rstrip + "\n" }.join.rstrip
    end + "\n"

    # skip the file if it was not modified
    next if Zlib.crc32(document) == Zlib.crc32(path.read)

    puts "Stripping whitepsace from #{path}"
    path.open('w') { |f| f.write document }
  end
end
